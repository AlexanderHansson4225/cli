# generated by datamodel-codegen:
#   filename:  datacontract.schema.json
#   timestamp: 2024-03-01T11:04:48+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import AnyUrl, BaseModel, EmailStr, Extra, Field


class DataContractSpecificationVersion(Enum):
    field_0_9_2 = '0.9.2'
    field_0_9_1 = '0.9.1'
    field_0_9_0 = '0.9.0'


class Contact(BaseModel):
    name: Optional[str] = Field(
        None, description='The identifying name of the contact person/organization.'
    )
    url: Optional[AnyUrl] = Field(
        None,
        description='The URL pointing to the contact information. This MUST be in the form of a URL.',
    )
    email: Optional[EmailStr] = Field(
        None,
        description='The email address of the contact person/organization. This MUST be in the form of an email address.',
    )


class Info(BaseModel):
    title: str = Field(..., description='The title of the data contract.')
    version: str = Field(
        ...,
        description='The version of the data contract document (which is distinct from the Data Contract Specification version or the Data Product implementation version).',
    )
    description: Optional[str] = Field(
        None, description='A description of the data contract.'
    )
    owner: Optional[str] = Field(
        None,
        description='The owner or team responsible for managing the data contract and providing the data.',
    )
    contact: Optional[Contact] = Field(
        None, description='Contact information for the data contract.'
    )


class Type(Enum):
    bigquery = 'bigquery'
    BigQuery = 'BigQuery'


class BigQueryServer(BaseModel):
    class Config:
        extra = Extra.allow

    type: Type = Field(
        ...,
        description='The type of the data product technology that implements the data contract.',
    )
    project: str = Field(..., description='An optional string describing the server.')
    dataset: str = Field(..., description='An optional string describing the server.')


class Type1(Enum):
    s3 = 's3'


class S3Server(BaseModel):
    class Config:
        extra = Extra.allow

    type: Type1 = Field(
        ...,
        description='The type of the data product technology that implements the data contract.',
    )
    location: AnyUrl = Field(
        ...,
        description='An optional string describing the server. Must be in the form of a URL.',
    )


class Type2(Enum):
    redshift = 'redshift'


class RedshiftServer(BaseModel):
    class Config:
        extra = Extra.allow

    type: Type2 = Field(
        ...,
        description='The type of the data product technology that implements the data contract.',
    )
    account: str = Field(..., description='An optional string describing the server.')
    database: str = Field(..., description='An optional string describing the server.')
    schema_: str = Field(
        ..., alias='schema', description='An optional string describing the server.'
    )


class Type3(Enum):
    snowflake = 'snowflake'


class SnowflakeServer(BaseModel):
    class Config:
        extra = Extra.allow

    type: Type3 = Field(
        ...,
        description='The type of the data product technology that implements the data contract.',
    )
    account: str = Field(..., description='An optional string describing the server.')
    database: str = Field(..., description='An optional string describing the server.')
    schema_: str = Field(
        ..., alias='schema', description='An optional string describing the server.'
    )


class DatabricksServer(BaseModel):
    class Config:
        extra = Extra.allow

    type: str = Field(
        'databricks',
        const=True,
        description='The type of the data product technology that implements the data contract.',
    )
    host: str = Field(
        ...,
        description='The Databricks host',
        examples=['dbc-abcdefgh-1234.cloud.databricks.com'],
    )
    catalog: str = Field(..., description='The name of the Hive or Unity catalog')
    schema_: str = Field(
        ..., alias='schema', description='The schema name in the catalog'
    )


class PostgresServer(BaseModel):
    class Config:
        extra = Extra.allow

    type: str = Field(
        'postgres',
        const=True,
        description='The type of the data product technology that implements the data contract.',
    )
    host: str = Field(
        ..., description='The host to the database server', examples=['localhost']
    )
    port: int = Field(..., description='The port to the database server.')
    database: str = Field(
        ..., description='The name of the database.', examples=['postgres']
    )
    schema_: str = Field(
        ...,
        alias='schema',
        description='The name of the schema in the database.',
        examples=['public'],
    )


class Type4(Enum):
    kafka = 'kafka'


class KafkaServer(BaseModel):
    class Config:
        extra = Extra.allow

    type: Type4 = Field(
        ...,
        description='The type of the data product technology that implements the data contract.',
    )
    host: str = Field(..., description='The bootstrap server of the kafka cluster.')
    topic: str = Field(..., description='The topic name.')
    format: Optional[str] = Field(
        'json',
        description='The format of the message. Examples: json, avro, protobuf. Default: json.',
    )


class Type5(Enum):
    pubsub = 'pubsub'


class PubSubServer(BaseModel):
    class Config:
        extra = Extra.allow

    type: Type5 = Field(
        ...,
        description='The type of the data product technology that implements the data contract.',
    )
    project: str = Field(..., description='The GCP project name.')
    topic: str = Field(..., description='The topic name.')


class Type6(Enum):
    local = 'local'


class LocalServer(BaseModel):
    class Config:
        extra = Extra.allow

    type: Type6 = Field(
        ...,
        description='The type of the data product technology that implements the data contract.',
    )
    path: str = Field(
        ...,
        description='The relative or absolute path to the data file(s).',
        examples=['./folder/data.parquet', './folder/*.parquet'],
    )
    format: str = Field(
        ...,
        description='The format of the file(s)',
        examples=['json', 'parquet', 'csv'],
    )


class Terms(BaseModel):
    usage: Optional[str] = Field(
        None,
        description='The usage describes the way the data is expected to be used. Can contain business and technical information.',
    )
    limitations: Optional[str] = Field(
        None,
        description='The limitations describe the restrictions on how the data can be used, can be technical or restrictions on what the data may not be used for.',
    )
    billing: Optional[str] = Field(
        None,
        description="The billing describes the pricing model for using the data, such as whether it's free, having a monthly fee, or metered pay-per-use.",
    )
    noticePeriod: Optional[str] = Field(
        None,
        description="The period of time that must be given by either party to terminate or modify a data usage agreement. Uses ISO-8601 period format, e.g., 'P3M' for a period of three months.",
    )


class ModelType(Enum):
    table = 'table'
    view = 'view'
    object = 'object'


class FieldType(Enum):
    number = 'number'
    decimal = 'decimal'
    numeric = 'numeric'
    int = 'int'
    integer = 'integer'
    long = 'long'
    bigint = 'bigint'
    float = 'float'
    double = 'double'
    string = 'string'
    text = 'text'
    varchar = 'varchar'
    boolean = 'boolean'
    timestamp = 'timestamp'
    timestamp_tz = 'timestamp_tz'
    timestamp_ntz = 'timestamp_ntz'
    date = 'date'
    array = 'array'
    object = 'object'
    record = 'record'
    struct = 'struct'
    bytes = 'bytes'
    null = 'null'


class FieldModel(BaseModel):
    description: Optional[str] = Field(
        None,
        description='An optional string describing the semantic of the data in this field.',
    )
    type: Optional[FieldType] = Field(
        None, description='The logical data type of the field.', title='FieldType'
    )
    required: Optional[bool] = Field(
        False,
        description='An indication, if this field must contain a value and may not be null.',
    )
    unique: Optional[bool] = Field(
        False,
        description='An indication, if the value must be unique within the model.',
    )
    enum: Optional[List[str]] = Field(
        None,
        description='A value must be equal to one of the elements in this array value. Only evaluated if the value is not null.',
        unique_items=True,
    )
    minLength: Optional[float] = Field(
        None,
        description='A value must greater than, or equal to, the value of this. Only applies to string types.',
    )
    maxLength: Optional[float] = Field(
        None,
        description='A value must less than, or equal to, the value of this. Only applies to string types.',
    )
    format: Optional[str] = Field(
        None,
        description="A specific format the value must comply with (e.g., 'email', 'uri', 'uuid').",
    )
    pattern: Optional[str] = Field(
        None,
        description='A regular expression the value must match. Only applies to string types.',
    )
    minimum: Optional[float] = Field(
        None,
        description='A value of a number must greater than, or equal to, the value of this. Only evaluated if the value is not null. Only applies to numeric values.',
    )
    exclusiveMinimum: Optional[float] = Field(
        None,
        description='A value of a number must greater than the value of this. Only evaluated if the value is not null. Only applies to numeric values.',
    )
    maximum: Optional[float] = Field(
        None,
        description='A value of a number must less than, or equal to, the value of this. Only evaluated if the value is not null. Only applies to numeric values.',
    )
    exclusiveMaximum: Optional[float] = Field(
        None,
        description='A value of a number must less than the value of this. Only evaluated if the value is not null. Only applies to numeric values.',
    )
    example: Optional[str] = Field(None, description='An example value for this field.')
    pii: Optional[bool] = Field(
        None,
        description='An indication, if this field contains Personal Identifiable Information (PII).',
    )
    classification: Optional[str] = Field(
        None,
        description="The data class defining the sensitivity level for this field, according to the organization's classification scheme.",
        examples=['sensitive', 'restricted', 'internal', 'public'],
    )
    tags: Optional[List[str]] = Field(
        None, description='Custom metadata to provide additional context.'
    )
    field_ref: Optional[str] = Field(
        None,
        alias='$ref',
        description='A reference URI to a definition in the specification, internally or externally. Properties will be inherited from the definition.',
    )


class Model(BaseModel):
    description: Optional[str] = None
    type: Optional[ModelType] = Field(
        'table',
        description='The type of the model. Examples: table, view, object. Default: table.',
        title='ModelType',
    )
    fields: Optional[Dict[str, FieldModel]] = Field(
        None,
        description='Specifies a field in the data model. Use the field name (e.g., the column name) as the key.',
    )


class Definition(BaseModel):
    domain: Optional[str] = Field(
        'global', description='The domain in which this definition is valid.'
    )
    name: str = Field(..., description='The technical name of this definition.')
    title: Optional[str] = Field(
        None, description='The business name of this definition.'
    )
    description: Optional[str] = Field(
        None, description='Clear and concise explanations related to the domain.'
    )
    type: str = Field(..., description='The logical data type.')
    minLength: Optional[float] = Field(
        None,
        description='A value must be greater than or equal to this value. Applies only to string types.',
    )
    maxLength: Optional[float] = Field(
        None,
        description='A value must be less than or equal to this value. Applies only to string types.',
    )
    format: Optional[str] = Field(
        None,
        description="Specific format requirements for the value (e.g., 'email', 'uri', 'uuid').",
    )
    pattern: Optional[str] = Field(
        None,
        description='A regular expression pattern the value must match. Applies only to string types.',
    )
    example: Optional[str] = Field(None, description='An example value.')
    pii: Optional[bool] = Field(
        None,
        description='Indicates if the field contains Personal Identifiable Information (PII).',
    )
    classification: Optional[str] = Field(
        None,
        description='The data class defining the sensitivity level for this field.',
    )
    tags: Optional[List[str]] = Field(
        None, description='Custom metadata to provide additional context.'
    )


class SchemaType(Enum):
    dbt = 'dbt'
    bigquery = 'bigquery'
    json_schema = 'json-schema'
    sql_ddl = 'sql-ddl'
    avro = 'avro'
    protobuf = 'protobuf'
    custom = 'custom'


class Schema(BaseModel):
    type: SchemaType = Field(
        ...,
        description='The type of the schema. Typical values are dbt, bigquery, json-schema, sql-ddl, avro, protobuf, custom.',
        title='SchemaType',
    )
    specification: Union[str, Dict[str, Any]]


class ExampleType(Enum):
    csv = 'csv'
    json = 'json'
    yaml = 'yaml'
    custom = 'custom'


class Example(BaseModel):
    type: ExampleType = Field(
        ...,
        description='The type of the example data. Well-known types are csv, json, yaml, custom.',
        title='ExampleType',
    )
    description: Optional[str] = Field(
        None, description='An optional string describing the example.'
    )
    model: Optional[str] = Field(
        None,
        description='The reference to the model in the schema, e.g., a table name.',
    )
    data: Union[str, List]


class QualityType(Enum):
    SodaCL = 'SodaCL'
    montecarlo = 'montecarlo'
    custom = 'custom'


class Quality(BaseModel):
    type: QualityType = Field(
        ...,
        description='The type of the quality check. Typical values are SodaCL, montecarlo, custom.',
        title='QualityType',
    )
    specification: Union[str, Dict[str, Any]]


class DataContractSpecification(BaseModel):
    dataContractSpecification: DataContractSpecificationVersion = Field(
        ...,
        description='Specifies the Data Contract Specification being used.',
        title='DataContractSpecificationVersion',
    )
    id: str = Field(..., description='Specifies the identifier of the data contract.')
    info: Info = Field(
        ..., description='Metadata and life cycle information about the data contract.'
    )
    servers: Optional[
        Dict[
            str,
            Union[
                BigQueryServer,
                S3Server,
                RedshiftServer,
                SnowflakeServer,
                DatabricksServer,
                PostgresServer,
                KafkaServer,
                PubSubServer,
                LocalServer,
            ],
        ]
    ] = Field(None, description='Information about the servers.')
    terms: Optional[Terms] = Field(
        None, description='The terms and conditions of the data contract.'
    )
    models: Optional[Dict[str, Model]] = Field(
        None,
        description='Specifies the logical data model. Use the models name (e.g., the table name) as the key.',
    )
    definitions: Optional[Dict[str, Definition]] = Field(
        None,
        description='Clear and concise explanations of syntax, semantic, and classification of business objects in a given domain.',
    )
    schema_: Optional[Schema] = Field(
        None,
        alias='schema',
        description='The schema of the data contract describes the syntax and semantics of provided data sets. It supports different schema types.',
    )
    examples: Optional[List[Example]] = Field(
        None, description='The Examples Object is an array of Example Objects.'
    )
    quality: Optional[Quality] = Field(
        None, description='The quality object contains quality attributes and checks.'
    )
